<?php
include_once '../models/QuizModel.php';
include_once 'LobbyController.php';

/**
 * Class GameController
 * For the management of the game page.
 */
class GameController{
    private int $id_lobby;
    private int $id_quiz;
    private $quiz;
    private $questions;
    private int $nbQuest; //number total of questions in the quiz
    private int $currentQ = 0; //current question
    private $players = array();

    /**
     * GameController constructor.
     * @param int $id_lob : the game id that was generated by the lobby
     */
    function __construct(int $id_lob) {
        if ($id_lob != NULL){
            $this->id_lobby = $id_lob;
            $lobby = (new LobbyController())->get_lobby($id_lob);
            $this->id_quiz = $lobby['id_quiz'];
        } else {
            error_log("Fail idQuiz && idGame\n");
            exit();
        }
        $this->quiz = (new QuizModel())->getQuiz($this->id_quiz);
        $this->questions = (new QuizModel())->getAllQuestions($this->id_quiz);
        $this->nbQuest = (new QuizModel)->getNbQuestion($this->id_quiz);
    }

    /**
     * @return array|null return all information in an associative array about the quiz from the database
     */
    function getQuiz(): ?array{
        return $this->quiz;
    }

    /**
     * @return array get informations in an associative array about all questions of the quiz from the database
     */
    function getQuestions(): array
    {
        return $this->questions;
    }

    /**
     * loads the game page with a new question of the quiz by updating the data of the current quiz in $_SESSION.
     * If there are no more questions, the player is send to the score page
     */
    function loadGame(){
        if($this->currentQ == $this->nbQuest){ //check if there are still questions
            session_start();
            $_SESSION['gameSession'] = $this;
            if (isset($_SESSION['userId'])) {
                $idPlayer = (new LobbyController())->get_idPlayer($this->id_lobby, $_SESSION['userId']);
                (new LobbyController())->update_Player($idPlayer['id_player'], $this->getPlayerScore($_SESSION["userName"]));
            }
            header('location: score');
        } elseif (count($this->quiz) != 0 && count($this->questions) !== 0) { //check if quiz is valid and had questions
            session_start();
            $_SESSION['gameSession'] = $this;
            header('location: game?id_lobby='.$this->id_lobby);
        } else
            error_log("error from loadGame");
    }

    /**
     * End a quiz, Delete $_SESSION["NULL"]
     */
    function endGameSession(){
        session_start();
        $_SESSION['gameSession'] = NULL;
    }

    /**
     * @return int get the number of the current question in the associative array $this->questions
     */
    function getCurrentQNb(){
        return $this->currentQ;
    }

    /**
     * @return string get the progress of the quiz in percentage in string
     */
    function getProgress(){
        $progress = $this->currentQ / $this->nbQuest * 100;
        return number_format($progress, 2);
    }

    /**
     * @param int $id_question
     * @return array|null get all answer (good and bad) of a question in a associative array from the database
     */
    function getQAnswers(int $id_question){
        return $answers = (new QuizModel)->getAllAnswerQuest($id_question);
    }

    /**
     * @return int the id od the lobby/game
     */
    function getLobbyId(){
        return $this->id_lobby;
    }

    /**
     * @param $id
     * @param int $score by default it is equal to 0
     */
    function addPlayer(string $id, int $score=0){
        $this->players[$id] = $score;
    }

    /**
     * @param string $id
     * @param string $answer player's answer for the current question
     */
    function addPlayerAnswer(string $id, string $answer){
        $currentIdQuestion = $this->questions[$this->currentQ]["id_question"];  //get id of the current question
        $allAnswer = $this->getQAnswers($currentIdQuestion);                    //get all a answer of a quest
        if($answer === $allAnswer["goodAnswer"])
            $this->players[$id]++;
        $this->currentQ++;
    }

    /**
     * @param string $idPlayer
     * @return mixed get the player's score
     */
    function getPlayerScore(string $idPlayer){
        return $this->players[$idPlayer];
    }

    /**
     * @return int get total number of questions in the quiz
     */
    function getTotalNbQ(){
        return $this->nbQuest;
    }
}
